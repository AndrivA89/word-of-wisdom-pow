// Code generated by MockGen. DO NOT EDIT.
// Source: deps.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	domain "github.com/AndrivA89/word-of-wisdom-pow/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockcitationRepository is a mock of citationRepository interface.
type MockcitationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockcitationRepositoryMockRecorder
}

// MockcitationRepositoryMockRecorder is the mock recorder for MockcitationRepository.
type MockcitationRepositoryMockRecorder struct {
	mock *MockcitationRepository
}

// NewMockcitationRepository creates a new mock instance.
func NewMockcitationRepository(ctrl *gomock.Controller) *MockcitationRepository {
	mock := &MockcitationRepository{ctrl: ctrl}
	mock.recorder = &MockcitationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcitationRepository) EXPECT() *MockcitationRepositoryMockRecorder {
	return m.recorder
}

// GetRandomCitation mocks base method.
func (m *MockcitationRepository) GetRandomCitation() (*domain.Citation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRandomCitation")
	ret0, _ := ret[0].(*domain.Citation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRandomCitation indicates an expected call of GetRandomCitation.
func (mr *MockcitationRepositoryMockRecorder) GetRandomCitation() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRandomCitation", reflect.TypeOf((*MockcitationRepository)(nil).GetRandomCitation))
}
